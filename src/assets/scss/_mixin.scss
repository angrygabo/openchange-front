@mixin media-breakpoint-up($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (min-width: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  }
}

@mixin media-breakpoint-down($breakpoint) {
    @if map-has-key($breakpoints, $breakpoint) {
      @media (max-width: map-get($breakpoints, $breakpoint)) {
        @content;
      }
    }
}

@mixin media-breakpoint($breakpoint) {
    @if $breakpoint == xl {
      $breakpoint : lg;
      @if map-has-key($breakpoints, $breakpoint) {
        @media (min-width: map-get($breakpoints, $breakpoint)) {
          @content;
        }
      }
    }
    @if $breakpoint == lg {
      $breakpoint : lg;
      $upper: lg;
      $lower: md;
      @if map-has-key($breakpoints, $breakpoint) {
        @media (min-width: map-get($breakpoints, $lower)) {
          @content;
        }
      }
    }
    @if $breakpoint == md {
      $breakpoint : md;
      $upper: md;
      $lower: sm;
      @if map-has-key($breakpoints, $breakpoint) {
        @media (min-width: map-get($breakpoints, $lower)) {
          @content;
        }
      }
    }
    @if $breakpoint == sm {
      $breakpoint : sm;
      @if map-has-key($breakpoints, $breakpoint) {
        @media (max-width: map-get($breakpoints, $breakpoint)) {
          @content;
        }
      }
    }
    @if $breakpoint == xs {
      $breakpoint : xs;
      @if map-has-key($breakpoints, $breakpoint) {
        @media (max-width: map-get($breakpoints, $breakpoint)) {
          @content;
        }
      }
    }
}

@mixin media-breakpoint-between($breakpoint) {
  @if $breakpoint == xl {
    $breakpoint : lg;
    @if map-has-key($breakpoints, $breakpoint) {
      @media (min-width: map-get($breakpoints, $breakpoint)) {
        @content;
      }
    }
  }

  @if $breakpoint == lg {
    $breakpoint : lg;
    $upper: lg;
    $lower: md;
    @if map-has-key($breakpoints, $breakpoint) {
      @media (min-width: map-get($breakpoints, $lower)) and (max-width: map-get($breakpoints, $upper)) {
        @content;
      }
    }
  }

  @if $breakpoint == md {
    $breakpoint : md;
    $upper: md;
    $lower: sm;
    @if map-has-key($breakpoints, $breakpoint) {
      @media (min-width: map-get($breakpoints, $lower)) and (max-width: map-get($breakpoints, $upper)) {
        @content;
      }
    }
  }

  @if $breakpoint == sm {
    $breakpoint : sm;
    @if map-has-key($breakpoints, $breakpoint) {
      @media (max-width: map-get($breakpoints, $breakpoint)) {
        @content;
      }
    }
  }
  
  @if $breakpoint == xs {
    $breakpoint : xs;
    @if map-has-key($breakpoints, $breakpoint) {
      @media (max-width: map-get($breakpoints, $breakpoint)) {
        @content;
      }
    }
  }
}

@mixin container($size) {
  .container {
    @if $size == xl {
      max-width: $container-xl;
    }
    @if $size == lg {
      max-width: $container-lg;
    }
    @if $size == md {
      max-width: $container-md;
    }
    @if $size == sm {
      max-width: $container-sm;
    }
    @if $size == xs {
      max-width: $container-xs;
    }
  }
}

@mixin clearfix() {
    &::after {
      display: block;
      content: "";
      clear: both;
    }
}

@mixin offset($offset) {
  @for $col from 1 through $cols {
    @if $offset == $col {
      margin-left: calc((#{$offset} / 12) * 100%);
    }
  }
}

@mixin col-size() {
  flex-basis: 0;
  flex-grow: 1;
  max-width: 100%;
}

@mixin row-cols($row-col) {
  @for $col from 1 through $cols {
    @if $row-col == $col {
      flex:  0 0 calc(100% / #{$row-col});
      max-width: calc(100% / #{$row-col});
    }
  }
}

@mixin col-default($col-calc) {
  @for $col from 1 through $cols {
    @if $col-calc  == $col {
        flex: 0 0 calc((#{$col} / 12) * 100%);
        max-width: calc((#{$col} / 12) * 100%);
    }
  }
}

@mixin col($col,$spacing) {
  flex: 0 0 calc(((#{$col} / 12) * 100%) - #{$spacing}rem);
  max-width: calc(((#{$col} / 12) * 100%) - #{$spacing}rem);
  margin-left: calc(#{$spacing}rem / 2);
  margin-right: calc(#{$spacing}rem / 2);
  margin-bottom: #{$spacing}rem;
  @if $col == 12 {
    flex: 0 0 calc((#{$col} / 12) * 100%);
    max-width: calc((#{$col} / 12) * 100%);
    margin-left: 0;
    margin-right: 0;
  }
}

@mixin flex-wrap {
  flex-wrap: wrap;
}
@mixin flex-nowrap {
  flex-wrap: nowrap;
}
@mixin d-flex {
  display: flex;
}
@mixin d-inline-flex {
  display: inline-flex;
}

@mixin spacing-pt($spacing) {
  @if $spacing == 5 {
    padding-top: 1rem*3!important;
  }
  @if $spacing == 4 {
    padding-top: 1rem*1.5!important;
  }
  @if $spacing == 3 {
    padding-top: 1rem!important;
  }
  @if $spacing == 2 {
    padding-top: 1rem*.5!important;
  }
  @if $spacing == 1 {
    padding-top: 1rem*.25!important;
  }
  @if $spacing == 0 {
    padding-top: 0!important;
  }
}

@mixin spacing-pb($spacing) {
  @if $spacing == 5 {
    padding-bottom: 1rem*3!important;
  }
  @if $spacing == 4 {
    padding-bottom: 1rem*1.5!important;
  }
  @if $spacing == 3 {
    padding-bottom: 1rem!important;
  }
  @if $spacing == 2 {
    padding-bottom: 1rem*.5!important;
  }
  @if $spacing == 1 {
    padding-bottom: 1rem*.25!important;
  }
  @if $spacing == 0 {
    padding-bottom: 0!important;
  }
}

@mixin spacing-pr($spacing) {
  @if $spacing == 5 {
    padding-right: 1rem*3!important;
  }
  @if $spacing == 4 {
    padding-right: 1rem*1.5!important;
  }
  @if $spacing == 3 {
    padding-right: 1rem!important;
  }
  @if $spacing == 2 {
    padding-right: 1rem*.5!important;
  }
  @if $spacing == 1 {
    padding-right: 1rem*.25!important;
  }
  @if $spacing == 0 {
    padding-right: 0!important;
  }
}

@mixin spacing-pl($spacing) {
  @if $spacing == 5 {
    padding-left: 1rem*3!important;
  }
  @if $spacing == 4 {
    padding-left: 1rem*1.5!important;
  }
  @if $spacing == 3 {
    padding-left: 1rem!important;
  }
  @if $spacing == 2 {
    padding-left: 1rem*.5!important;
  }
  @if $spacing == 1 {
    padding-left: 1rem*.25!important;
  }
  @if $spacing == 0 {
    padding-left: 0!important;
  }
}

@mixin spacing-mt($spacing) {
  @if $spacing == 5 {
    margin-top: 1rem*3!important;
  }
  @if $spacing == 4 {
    margin-top: 1rem*1.5!important;
  }
  @if $spacing == 3 {
    margin-top: 1rem!important;
  }
  @if $spacing == 2 {
    margin-top: 1rem*.5!important;
  }
  @if $spacing == 1 {
    margin-top: 1rem*.25!important;
  }
  @if $spacing == 0 {
    margin-top: 0!important;
  }
}

@mixin spacing-mb($spacing) {
  @if $spacing == 5 {
    margin-bottom: 1rem*3!important;
  }
  @if $spacing == 4 {
    margin-bottom: 1rem*1.5!important;
  }
  @if $spacing == 3 {
    margin-bottom: 1rem!important;
  }
  @if $spacing == 2 {
    margin-bottom: 1rem*.5!important;
  }
  @if $spacing == 1 {
    margin-bottom: 1rem*.25!important;
  }
  @if $spacing == 0 {
    margin-bottom: 0!important;
  }
}

@mixin spacing-mr($spacing) {
  @if $spacing == 5 {
    margin-right: 1rem*3!important;
  }
  @if $spacing == 4 {
    margin-right: 1rem*1.5!important;
  }
  @if $spacing == 3 {
    margin-right: 1rem!important;
  }
  @if $spacing == 2 {
    margin-right: 1rem*.5!important;
  }
  @if $spacing == 1 {
    margin-right: 1rem*.25!important;
  }
  @if $spacing == 0 {
    margin-right: 0!important;
  }
}

@mixin spacing-ml($spacing) {
  @if $spacing == 5 {
    margin-left: 1rem*3!important;
  }
  @if $spacing == 4 {
    margin-left: 1rem*1.5!important;
  }
  @if $spacing == 3 {
    margin-left: 1rem!important;
  }
  @if $spacing == 2 {
    margin-left: 1rem*.5!important;
  }
  @if $spacing == 1 {
    margin-left: 1rem*.25!important;
  }
  @if $spacing == 0 {
    margin-left: 0!important;
  }
}

// hidden elements
@mixin hidden {
  display: none!important;
  visibility: hidden!important;
}